########################################
# GO-Docker                            #
########################################

# PLUGINS ##############################
plugins_dir: '/home/osallou/Development/NOSAVE/go-docker/go-d-sched/plugins'

# DIRECTORIES ##########################
shared_dir: '/home/osallou/Development/NOSAVE/go-docker/godshared'

# DEFAULTS #############################

defaults_cpu: 1
defaults_ram: 2

network:
    # Disable network in containers
    # If set , application won't be able to install sudo package if not present.
    # In this case, you should make sure container contains required packages.
    disabled: False
    # Use ip per container CNI plugins, Kubernetes provides by default ip per container, cni is not needed
    # For Mesos, mesos slave itself must be configured to work with cni:
    #          --network_cni_config_dir=/etc/cni/net.d
    #           --network_cni_plugins_dir=/opt/cni/bin
    # CNI usage requires to setup CNI plugin rules (*expose* for Weave, *calicoctl* profiles for Calico) to manage inbound/outbound rules
    use_cni: False
    # weave, calico, etc.: a plugin extending INetworkPlugin
    # See https://www.weave.works/docs/net/latest/cni-plugin/, https://github.com/apache/mesos/blob/master/docs/cni.md
    cni_plugin: null
    # Default name of the cni plugin network ('weave' for weave CNI)
    cni_public_network_name: null

# Allow root access to containers
allow_root: True

# Number of days of inactivity after which user usage should be reset
user_reset_usage_duration: 30

# Constraints #########################
# See Docker labels
constraints:
    - name: 'storage'
      value: 'ssd,disk'
    - name: 'resource'
      value: 'gpu_10.5'

# Projects ############################
# Allow users of the same project to view/manage other users tasks
share_project_tasks: False

# Live notifications ##################
# Use live notifications on tasks, needs Go-D-Live server
live_events: False
#  Go-D-Live websocket URL
live_events_url: 'http://localhost:8001'


# SECURITY #############################
secret_passphrase: 'mysamplesecret'
# secret shared among different applications
shared_secret_passphrase: 'mysamplesecret'

# IMAGES ###############################
# Default container images proposed to user
default_images:
    - name: 'centos'
      url: 'centos:latest'
      interactive: False
      default: True
    - name: 'ubuntu'
      url: 'rastasheep/ubuntu-sshd'
      interactive: True

# Needs swarm >= 0.2
allow_user_images: False

# Private Registry #####################
# Allow pull only from a private registry, value is appended to image name
# Default: null
# Example value: 'my.registry.com:5000'
# => pull myimage => pull my.registry.com:5000/myimage
use_private_registry: null

# VOLUMES ##############################
# Mandatory fields
# name: label, home is a reserved label that will map to user home directory
# acl: rw (read and write) or ro (read-only)
# path: local path for this directory (ignored for home)
# Optional fields
# mount: path in the container, if not set, use the same then path
#
# path and mount can specify $USERID variable that will be replaced by user identifier.

# Check if volume exists (on scheduler) before mounting it
volumes_check: True

volumes:
    - name: 'home'
      acl: 'rw'
    - name: 'omaha'
      acl: 'rw'
      mount: '/omaha-beach/$USERID'
      path: '/omaha-beach/$USERID'
    - name: 'db'
      acl: 'ro'
      path: '/db'

# Temporary local volumes
# Use docker-plugin-zfs Docker volume plugin: True, False
# Plugin must be running on all slaves and must be supported by framework

plugin_zfs: False


# PORTS ###############################
port_allocate: True  # allocates a port from following range instead of mapping port to itself
port_start: 10000
port_range: 1000


# MONGODB ##############################
mongo_url: 'mongodb://localhost:27017/'
mongo_db: 'god'

# REDIS ################################
# Redis configuration
redis_host: 'localhost'
redis_port:  6379
# Redis database id
redis_db: 0
redis_prefix: 'god'

# INFLUXDB ############################
influxdb_host: null # or null if not required
influxdb_port: 8086
influxdb_user: 'root'
influxdb_password: 'root'
influxdb_db: 'god'

# Scheduling ###########################
scheduler_policy: 'FiFo'
max_job_pop: 100

# Execution system #####################
executor: 'swarm'
#executor: 'fake'
#executor: 'mesos'

# Stats ################################
prometheus_key: 'mysecretkey'
prometheus_exporter: '127.0.0.1:6543'

# Scheduler master election ############
# Default: 600s
# Waiting time before a scheduler becomes the new leader if previous one
# is not active anymore
master_timeout: 600

# web endpoint
# Default: http://127.0.0.1:6543
# Local web server endpoint
# Used by consul status manager
web_endpoint: 'http://127.0.0.1:6543'

# Mesos ################################

# DEPRECATED
# mesos_master: '127.0.0.1:5050'

mesos:
    master: 'zk://localhost:2181/mesos'
    # Check tasks status at start
    reconcile: True
    # Use Mesos unified containerizer. TO use ports (ssh for interactive for example),
    # Mesos needs to be configured with CNI
    # Mesos slave needs to be configured to have in isolation cgroups/cpu and cgroups/mem
    unified: False

# Kubernetes ###########################
# API Version: 1
kube_server: 'http://127.0.0.1:8080'
# If token set on server for authentication
kube_token: null

# Authentication #######################
auth_policy: 'fake'

# Allow HTTP_REMOTE_USER header for authentication
allow_proxy_remote_user: False

#Â LDAP
ldap_host: null
ldap_port: null
ldap_dn: null
ldap_base_dn_filter: 'ou=People'
ldap_admin_dn: null
ldap_admin_password: null

ldap:
    # LDAP field mapping
    fields:
        homeDirectory: 'homeDirectory'

# Watchers #############################
# List of watchers, example
# watchers:
#     - 'maxlifespan'
watchers: null


# Max job life duration expressed in d(days), h(hours), s(seconds) if not specified in task
maxlifespan: '7d'

# Requirement dynamic fields (optional) ##########
# fields that can be updated after task submission in requirements, string type only
#dynamic_fields:
#    - name: 'maxlifespan'
#      admin_only: False

# Docker ###############################
docker:
    # tcp://127.0.0.1:2375 if not tls, else https://127.0.0.1:2375
    url: 'tcp://127.0.0.1:2375'
    api_version: 'auto'
    tls: True
    # Authenticate server based on given CA => '/path/to/ca.pem'
    ca_cert: null
    # Authenticate with client certificate => '/path/to/client-cert.pem', '/path/to/client-key.pem'
    client_cert: null
    client_key: null

# CAdvisor #############################
cadvisor_port: 8080
# /docker to map to /api/v1.2/docker/container_id, /containers/mesos for Mesos
# This parameter override default url part to manage cAdvisor versions
# cadvisor_url_part_override: '/docker'
# Number of samples (seconds) to display , according to cAdvisor launch option -storage_duration
cadvisor_samples: 60

# Email SMTP ################################
email_from: 'godocker@do-no-reply.fr'
email_smtp_tls: False
email_smtp_user: null
email_smtp_password: null
email_smtp_host: null
email_smtp_port: 25

# Clean up ##################################
# Number of days after which job directory
# can be deleted by cleanup script
# Default: 30
clean_old: 30

# Disk quota ###############################
# Optional disk quota management
# Default: null (no quota)
# Possible values (value + unit): 12 (bytes), 5k (kilobytes), 12M (megabytes), 40G (gigabytes)
disk_default_quota: null


# Rate limiting ############################
# Max number of pending tasks for a user
# New tasks will be rejected if rate is reached
# It is wise to limit it to limit total number of pending jobs for scheduler.
# Default: null (no limit)
# Value example: 1000
rate_limit: null
# Max number of pending tasks for all users (to avoid scheduler overload)
# When limit is reached, new tasks are rejected
rate_limit_all: 10000


# Status Manager ###########################
# Uncomment to use etcd monitoring
#status_policy: 'etcd'
#etcd_prefix: '/godocker'
#etcd_host: '127.0.0.1'
#etcd_port: 4001

# Guest management ########################

# Allow guest (user not having a local account) to login
guest_allow: False
# Local user that will run the tasks for the guest
guest_bind: null
# Allow guest to run scripts as root in containers
guest_allow_root: False
# Home directory base path for guest, guest home dir will be guest_home_root/guest_userid
# null => No home directory
# 'default', use guest_bind home directory
guest_home_root: null


# FTP storage per user ######################################
# Available in $GODOCKER_DATA in container
# Credentials: user_id / api_key
ftp:
    listen: '127.0.0.1'
    port: 2121
    quota: '1M'
    # Public ftp url to access the FTP server if behind a proxy
    public_endpoint: 'ftp://127.0.0.1:2121'

# GoDocker flow ############################

flow:
    max_parallel_event: 2
    fake_user: 'osallou'
    frontend: 'http://127.0.0.1:5000'

# Failure strategy #########################

failure_policy:
    # 0: no restart, N: retry N times
    strategy: 0
    # Do not reschedule on nodes where task previously failed
    skip_failed_nodes: False

# Add in Web UI a link to the registry for the selected image
# Example a.b.c/user1/image1 => name=a.b.c,url=http://myimages.c/browse/$IMAGE where $IMAGE will be replaced by user1/image1
# DockerHub images user1/image1 will be linked to DockerHub official site
link_image_to_registry:
    - name: 'docker-registry.genouest.org'
      url: 'https://docker-ui.genouest.org/app/#/container/$IMAGE'


# Logging ##################################
log_config:
    'version': 1
    'formatters':
        'generic':
            'format': '%(asctime)s %(levelname)-5.5s [%(name)s][%(threadName)s] %(message)s'
    'handlers':
        'console':
            'class': 'logging.StreamHandler'
            'formatter': 'generic'
            'level': 'INFO'
        'watcher':
            'class': 'logging.FileHandler'
            'filename': 'godwatcher.log'
            'formatter': 'generic'
            'level': 'INFO'
        'scheduler':
            'class': 'logging.FileHandler'
            'filename': 'godscheduler.log'
            'formatter': 'generic'
            'level': 'INFO'
        'archiver':
            'class': 'logging.FileHandler'
            'filename': 'godarchiver.log'
            'formatter': 'generic'
            'level': 'DEBUG'
        'ftp':
            'class': 'logging.FileHandler'
            'filename': 'godftp.log'
            'formatter': 'generic'
            'level': 'DEBUG'
        'gelf':
            'class': 'graypy.GELFHandler'
            'host': 'localhost'
            'port':  12201
            'formatter': 'generic'
            'level': 'INFO'
        'logstash':
            'class': 'logstash.LogstashHandler'
            'host': 'localhost'
            'port':  59590
            'formatter': 'generic'
            'level': 'INFO'
    'loggers':
        'root':
            'level': 'INFO'
            'handlers':
                - 'console'
        'godocker-watcher':
            'level': 'INFO'
            'handlers':
                - 'console'
                - 'watcher'
                - 'gelf'
        'godocker-scheduler':
            'level': 'INFO'
            'handlers':
                - 'console'
                - 'scheduler'
                - 'gelf'
        'godocker-archiver':
            'level': 'INFO'
            'handlers':
                - 'console'
                - 'archiver'
                - 'gelf'
        'godocker-ftp':
            'level': 'DEBUG'
            'handlers':
                - 'console'
                - 'ftp'
    'disable_existing_loggers': False
